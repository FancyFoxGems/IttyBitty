/***********************************************************************************************
* [IttyBitty_menui.h]: MENU-BASED UI SYSTEM W/ INPUT FIELDS AND EXTENSIBLE NAVIGATION/DISPLAY
*
* This file is part of the Itty Bitty Arduino library.
* Copyright © 2016 Thomas J. Biuso III  ALL RIGHTS RESERVED...WHATEVER THAT MEANS.
* RELEASED UNDER THE GPL v3.0 LICENSE; SEE <LICENSE> FILE WITHIN DISTRIBUTION ROOT FOR TERMS.
***********************************************************************************************/

#ifndef _ITTYBITTY_UI_OPTIONS_H
#define _ITTYBITTY_UI_OPTIONS_H


#include "IttyBitty_bits.h"
#include "IttyBitty_LCD_chars.h"
// !TODO: line wrap callback

#pragma region MenUI OPTIONS/CONSTANTS

// [UiOptions] DEFAULT OPTIONS

// Layout & general presentation/interaction default options

#define MENUI_DEFAULT_MENU_LAYOUT					UiLayout::VERTICAL_CENTERED
#define MENUI_DEFAULT_LIST_LAYOUT					UiLayout::HORIZONTAL_AUTO

#define MENUI_DEFAULT_MENU_STATUS					UiStatusFlags::UI_STATUS_SCROLLBAR
#define MENUI_DEFAULT_LIST_STATUS					UiStatusFlags::UI_STATUS_SCROLLBAR

#define MENUI_DEFAULT_IDLE_TIMEOUT_TICKS			50


// Scrolling default options

#define MENUI_DEFAULT_SCROLL_BEHAVIOR				UiScrollBehavior::NORMAL
#define MENUI_DEFAULT_SCROLL_WRAP					TRUE

#define MENUI_DEFAULT_SCROLL_AUTO_DELAY_MS			2000
#define MENUI_DEFAULT_SCROLL_HORIZONTAL_MS			500
#define MENUI_DEFAULT_SCROLL_VERTICAL_MS			500


// Input default options

#define MENUI_DEFAULT_DBL_CLICK_THRESHOLD_MS		2000
#define MENUI_DEFAULT_HOLD_THRESHOLD_MS				800
#define MENUI_DEFAULT_HOLD_REPEAT_MS				500


// Navigation default options

#define MENUI_DEFAULT_SET_ON_RETURN					FALSE
#define MENUI_DEFAULT_DBL_CLICK_SELECT_TO_SET		TRUE
#define MENUI_DEFAULT_HOLD_SELECT_TO_SET			TRUE
#define MENUI_DEFAULT_DBL_CLICK_SELECT_TO_ESCAPE	TRUE
#define MENUI_DEFAULT_HOLD_SELECT_TO_ESCAPE			TRUE
#define MENUI_DEFAULT_DBL_CLICK_RETURN_TO_HOME		TRUE
#define MENUI_DEFAULT_HOLD_RETURN_TO_HOME			TRUE


// Display default options

#define MENUI_DEFAULT_SHOW_CURSOR_ON_ENTRY			TRUE
#define MENUI_DEFAULT_BLINK_CURSOR_ON_ENTRY			TRUE

#define MENUI_DEFAULT_LAYOUT_COL_SPACING			1
#define MENUI_DEFAULT_LIST_ITEM_MARGIN				0
#define MENUI_DEFAULT_SELECTION_GLYPH_OFFSET		0

#define MENUI_DEFAULT_HIGHLIGHT_SELECTIONS			FALSE



// [UiRendererOptions] DEFAULT OPTIONS/CONSTANTS

// General renderer-specific default options

#define MENUI_DEFAULT_WRAP_LINES					FALSE
#define MENUI_DEFAULT_STYLED_LINE_MARGINS			1


// Glyph default options for non-LCD-based renderers

#define MENUI_DEFAULT_STYLED_LINE_LEFT_GLYPH		'['
#define MENUI_DEFAULT_STYLED_LINE_RIGHT_GLYPH		']'

#define MENUI_DEFAULT_MENU_ITEM_GLYPH				'-'
#define MENUI_DEFAULT_LIST_CHOICE_GLYPH				'*'
#define MENUI_DEFAULT_CURR_ITEM_GLYPH				'>'
#define MENUI_DEFAULT_SELECTION_GLYPH				'X'
#define MENUI_DEFAULT_MULTI_SELECTION_GLYPH			'+'
#define MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH			':'


// Glyph default options for LCD -based renderers

#define MENUI_DEFAULT_LCD_STYLED_LINE_LEFT_GLYPH	LCD_SYMBOL_BACKWARD
#define MENUI_DEFAULT_LCD_STYLED_LINE_RIGHT_GLYPH	LCD_SYMBOL_FORWARD

#define MENUI_DEFAULT_LCD_MENU_ITEM_GLYPH			LCD_SYMBOL_BULLET
#define MENUI_DEFAULT_LCD_LIST_CHOICE_GLYPH			LCD_SYMBOL_BULLET
#define MENUI_DEFAULT_LCD_CURR_ITEM_GLYPH			LCD_SYMBOL_ARROW_RIGHT
#define MENUI_DEFAULT_LCD_SELECTION_GLYPH			LCD_SYMBOL_TRIANGLE_UP
#define MENUI_DEFAULT_LCD_MULTI_SELECTION_GLYPH		LCD_SYMBOL_MULTIPLICATION
#define MENUI_DEFAULT_LCD_VALUE_SEPARATOR_GLYPH		MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH



// MenUI PARAMETER DEFAULT VALUES

// Text display default values

#define MENUI_DEFAULT_TEXT_TIMEOUT_MS				0
#define MENUI_DEFAULT_TEXT_ALLOW_ESCAPE				TRUE
#define MENUI_DEFAULT_TEXT_ANY_ACTION_RETURNS		TRUE


// Menu/List default values

#define MENUI_DEFAULT_MENU_CAPACITY					5
#define MENUI_DEFAULT_LIST_CAPACITY					5


// Dialog/field default values

#define MENUI_DEFAULT_NUMERIC_FIELD_STEP			1
#define MENUI_DEFAULT_NUMERIC_FIELD_STEP_LARGE		10



// MISCELLANEOUS MenUI CONSTANTS

#define MENUI_IDLE_TICK_MS							100

#pragma endregion


namespace IttyBitty
{
#pragma region FORWARD DECLARATIONS & TYPE ALIASES

	struct _UiOptions;
	TYPEDEF_STRUCT_ALIASES(UiOptions, uioptions, UIOPTIONS);

	struct _UiRendererOptions;
	TYPEDEF_STRUCT_ALIASES(UiRendererOptions, uirendereroptions, UIRENDEREROPTIONS);

#pragma endregion


#pragma region UI NAVIGATION ENUMS

	#define MENUI_NUM_STATEFUL_ACTIONS		0x6

	ENUM UiActionType : BYTE
	{
		ACTION_UP		= 0x0,
		ACTION_DOWN		= 0x1,
		ACTION_LEFT		= 0x2,
		ACTION_RIGHT	= 0x3,
		ACTION_RETURN	= 0x4,
		ACTION_SELECT	= 0x5,
		ACTION_SHIFT	= 0x6,
		ACTION_ALT		= 0x7
	};

	DECLARE_ENUM_AS_FLAGS(UiActionType, UIACTIONTYPE);

	ENUM UiActionBehavior : BYTE
	{
		ACTION_LATCH		= 0x00,
		ACTION_STATEFUL		= 0x10
	};

	DECLARE_ENUM_AS_FLAGS(UiActionBehavior, UIACTIONBEHAVIOR);

	ENUM_CLASS UiAction : BYTE
	{
		UP		= ACTION_UP | ACTION_STATEFUL,
		DOWN	= ACTION_DOWN | ACTION_STATEFUL,
		LEFT	= ACTION_LEFT | ACTION_STATEFUL,
		RIGHT	= ACTION_RIGHT | ACTION_STATEFUL,
		RETURN	= ACTION_RETURN | ACTION_STATEFUL,
		SELECT	= ACTION_SELECT | ACTION_STATEFUL,
		SHIFT	= ACTION_SHIFT | ACTION_LATCH,
		ALT		= ACTION_ALT | ACTION_LATCH
	};

	TYPEDEF_ENUM_ALIASES(UiAction, UIACTION);

	INLINE CBOOL UiActionIsStateful(CUIACTION action)
	{
		return static_cast<CBOOL>(HIGH_NYBBLE((CBYTE)action));
	}

	INLINE CUIACTIONTYPE UiActionToActionType(CUIACTION action)
	{
		return static_cast<CUIACTIONTYPE>(LOW_NYBBLE((CBYTE)action));
	}


	ENUM UiActionState : BYTE
	{
		INACTION		= 0x00,
		PRESSED			= 0x01,
		RELEASED		= 0x02,
		CLICK			= 0x04 | RELEASED,
		DOUBLE_CLICK	= 0x08 | CLICK,
		HELD			= 0x10 | PRESSED,
		SHIFT_ON		= 0x20,
		ALT_ON			= 0x40,

		SHIFT_CLICK			= CLICK | SHIFT_ON,
		ALT_CLICK			= CLICK | ALT_ON,
		SHIFT_ALT_CLICK		= CLICK | SHIFT_ON | ALT_ON,
		SHIFT_DOUBLE		= DOUBLE_CLICK | SHIFT_ON,
		ALT_DOUBLE			= DOUBLE_CLICK | ALT_ON,
		SHIFT_ALT_DOUBLE	= DOUBLE_CLICK | SHIFT_ON | ALT_ON,
		SHIFT_HELD			= HELD | SHIFT_ON,
		ALT_HELD			= HELD | ALT_ON,
		SHIFT_ALT_HELD		= HELD | SHIFT_ON | ALT_ON
	};

	DECLARE_ENUM_AS_FLAGS(UiActionState, UIACTIONSTATE);

	INLINE CBOOL UiActionStateIsPressed(CUIACTIONSTATE state)
	{
		return UiActionStateHas(state, PRESSED);
	}

	INLINE CBOOL UiActionStateIsShiftOn(CUIACTIONSTATE state)
	{
		return UiActionStateHas(state, SHIFT_ON);
	}

	INLINE CBOOL UiActionStateIsAltOn(CUIACTIONSTATE state)
	{
		return UiActionStateHas(state, ALT_ON);
	}

	INLINE CBOOL UiActionStateIsShiftAltOn(CUIACTIONSTATE state)
	{
		return UiActionStateHas(state, static_cast<CUIACTIONSTATE>(BOR(SHIFT_ON, ALT_ON)));
	}

#pragma endregion


#pragma region UI OPTION & LAYOUT ENUMS

	ENUM UiOrientation : BYTE
	{
		VERTICAL	= 0x0,
		HORIZONTAL	= 0x1
	};

	DECLARE_ENUM_AS_FLAGS(UiOrientation, UIORIENTATION);


	ENUM_CLASS UiDirection : BYTE
	{
		TOP_TO_BOTTOM	= VERTICAL | 0x0,
		BOTTOM_TO_TOP	= VERTICAL | 0x1,
		LEFT_TO_RIGHT	= HORIZONTAL | 0x0,
		RIGHT_TO_LEFT	= HORIZONTAL | 0x1
	};

	TYPEDEF_ENUM_ALIASES(UiDirection, UIDIRECTION);

	#define UI_DIRECTION_ORIENTATION_BIT	0x0
	#define UI_DIRECTION_BACKWARDS_BIT		0x1

	INLINE CBOOL UiDirectionIsHorizontal(CUIDIRECTION layoutDirection)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layoutDirection, UI_DIRECTION_ORIENTATION_BIT));
	}

	INLINE CBOOL UiDirectionIsBackwards(CUIDIRECTION layoutDirection)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layoutDirection, UI_DIRECTION_BACKWARDS_BIT));
	}


	ENUM UiLayoutCols : BYTE
	{
		COLS_AUTO		= 0x00,
		COLS_CENTERED	= 0x02,
		COLS_1			= 0x04,
		COLS_2			= 0x08,
		COLS_3			= 0x0C,
		COLS_4			= 0x10,
		COLS_5			= 0x14,
		COLS_6			= 0x18,
		COLS_7			= 0x1C,
		COLS_8			= 0x20
	};

	TYPEDEF_ENUM_ALIASES(UiLayoutCols, UILAYOUTCOLS);

	ENUM_CLASS UiLayout : BYTE
	{
		VERTICAL_AUTO			= VERTICAL | COLS_AUTO,
		HORIZONTAL_AUTO			= HORIZONTAL | COLS_AUTO,
		VERTICAL_CENTERED		= VERTICAL | COLS_CENTERED,
		HORIZONTAL_CENTERED		= HORIZONTAL | COLS_CENTERED,
		VERTICAL_1_COL			= VERTICAL | COLS_1,
		HORIZONTAL_1_COL		= HORIZONTAL | COLS_1,
		VERTICAL_2_COL			= VERTICAL | COLS_2,
		HORIZONTAL_2_COL		= HORIZONTAL | COLS_2,
		VERTICAL_3_COL			= VERTICAL | COLS_3,
		HORIZONTAL_3_COL		= HORIZONTAL | COLS_3,
		VERTICAL_4_COL			= VERTICAL | COLS_4,
		HORIZONTAL_4_COL		= HORIZONTAL | COLS_4,
		VERTICAL_5_COL			= VERTICAL | COLS_5,
		HORIZONTAL_5_COL		= HORIZONTAL | COLS_5,
		VERTICAL_6_COL			= VERTICAL | COLS_6,
		HORIZONTAL_6_COL		= HORIZONTAL | COLS_6,
		VERTICAL_7_COL			= VERTICAL | COLS_7,
		HORIZONTAL_7_COL		= HORIZONTAL | COLS_7,
		VERTICAL_8_COL			= VERTICAL | COLS_8,
		HORIZONTAL_8_COL		= HORIZONTAL | COLS_8,
	};

	TYPEDEF_ENUM_ALIASES(UiLayout, UILAYOUT);

	#define UI_LAYOUT_COLS_OFFSET			0x2

	INLINE CBOOL UiLayoutIsHorizontal(CUILAYOUT layout)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layout, UI_DIRECTION_ORIENTATION_BIT));
	}

	INLINE CBYTE UiLayoutToNumCols(CUILAYOUT layout)
	{
		return (CBYTE)layout SHR UI_LAYOUT_COLS_OFFSET;
	}


	ENUM UiStatusFlags : BYTE
	{
		UI_STATUS_NONE				= 0x0,
		UI_STATUS_SCROLLBAR			= 0x1,
		UI_STATUS_ITEM_INDEX		= 0x2,
		UI_STATUS_PAGE_INDEX		= 0x4,
		UI_STATUS_SHOW_TOTAL		= 0x8
	};

	DECLARE_ENUM_AS_FLAGS(UiStatusFlags, UISTATUSFLAGS);


	ENUM_CLASS UiScrollBehavior : BYTE
	{
		NORMAL			= 0x0,
		PAGED			= 0x1,
		STICKY_TOP		= 0x2,
		STICKY_MIDDLE	= 0x4,
		STICKY_BOTTOM	= 0x8
	};

	TYPEDEF_ENUM_ALIASES(UiScrollBehavior, UISCROLLBEHAVIOR);

#pragma endregion


#pragma region UI FIELD ENUMS

	ENUM AllowedCharFlags : BYTE
	{
		ALLOWED_CHARS_ALL		= 0x0,
		ALLOWED_CHARS_NUMERIC	= 0x1,
		ALLOWED_CHARS_UPPER		= 0x2,
		ALLOWED_CHARS_LOWER		= 0x4
	};

	DECLARE_ENUM_AS_FLAGS(AllowedCharFlags, ALLOWEDCHARFLAGS);

#pragma endregion


#pragma region [_UiOptions] DEFINITION

	STRUCT _UiOptions final
	{
		// PUBLIC INSTANCE VARIABLES

		// Layout & general presentation/interaction options

		UILAYOUT MenuLayout					= MENUI_DEFAULT_MENU_LAYOUT;
		UILAYOUT ListLayout					= MENUI_DEFAULT_LIST_LAYOUT;

		UISTATUSFLAGS MenuStatus			= MENUI_DEFAULT_MENU_STATUS;
		UISTATUSFLAGS ListStatus			= MENUI_DEFAULT_LIST_STATUS;

		WORD IdleTimeoutTicks				= MENUI_DEFAULT_IDLE_TIMEOUT_TICKS;


		// Scrolling options

		STRUCT
		{
			UISCROLLBEHAVIOR Behavior		= MENUI_DEFAULT_SCROLL_BEHAVIOR;
			BOOL Wrap						= MENUI_DEFAULT_SCROLL_WRAP;
			WORD AutoDelayMS				= MENUI_DEFAULT_SCROLL_AUTO_DELAY_MS;
			WORD HorizontalMS				= MENUI_DEFAULT_SCROLL_HORIZONTAL_MS;
			WORD VerticalMS					= MENUI_DEFAULT_SCROLL_VERTICAL_MS;
		}
		Scrolling;


		// Input options


		STRUCT _UiInputOptions
		{
			WORD DblClickThresholdMS		= MENUI_DEFAULT_DBL_CLICK_THRESHOLD_MS;
			WORD HoldThresholdMS			= MENUI_DEFAULT_HOLD_THRESHOLD_MS;
			WORD HoldRepeatMS				= MENUI_DEFAULT_HOLD_REPEAT_MS;
		}
		Input;


		// Navigation options

		STRUCT
		{
			BOOL SetOnReturn				= MENUI_DEFAULT_SET_ON_RETURN;
			BOOL DblClickSelectToSet		= MENUI_DEFAULT_DBL_CLICK_SELECT_TO_SET;
			BOOL HoldSelectToSet			= MENUI_DEFAULT_HOLD_SELECT_TO_SET;
			BOOL DblClickSelectToEscape		= MENUI_DEFAULT_DBL_CLICK_SELECT_TO_ESCAPE;
			BOOL HoldSelectToEscape			= MENUI_DEFAULT_HOLD_SELECT_TO_ESCAPE;
			BOOL DblClickReturnToEscape		= MENUI_DEFAULT_DBL_CLICK_RETURN_TO_HOME;
			BOOL HoldReturnToHome			= MENUI_DEFAULT_HOLD_RETURN_TO_HOME;
		}
		Navigation;


		// Display options

		STRUCT
		{
			BOOL ShowCursorOnEntry			= MENUI_DEFAULT_SHOW_CURSOR_ON_ENTRY;
			BOOL BlinkCursorOnEntry			= MENUI_DEFAULT_BLINK_CURSOR_ON_ENTRY;

			BYTE LayoutColSpacing			= MENUI_DEFAULT_LAYOUT_COL_SPACING;
			BYTE ListItemMargin				= MENUI_DEFAULT_LIST_ITEM_MARGIN;
			BYTE SelectionGlyphOffset		= MENUI_DEFAULT_SELECTION_GLYPH_OFFSET;

			BOOL HighlightSelections UNUSED	= MENUI_DEFAULT_HIGHLIGHT_SELECTIONS;
		}
		Display;
	};

#pragma endregion



#pragma region [_UiRendererOptions] DEFINITION

	STRUCT _UiRendererOptions final
	{
	public:

		// PUBLIC INSTANCE VARIABLES

		// General renderer-specific options

		BOOL WrapLines				= MENUI_DEFAULT_WRAP_LINES;
		BYTE StyledLineMargins		= MENUI_DEFAULT_STYLED_LINE_MARGINS;


		// Glyph options

		CHAR StyledLineLeftGlyph	= MENUI_DEFAULT_STYLED_LINE_LEFT_GLYPH;
		CHAR StyledLineRightGlyph	= MENUI_DEFAULT_STYLED_LINE_RIGHT_GLYPH;

		CHAR MenuItemGlyph			= MENUI_DEFAULT_MENU_ITEM_GLYPH;
		CHAR ListChoiceGlyph		= MENUI_DEFAULT_LIST_CHOICE_GLYPH;
		CHAR CurrItemGlyph			= MENUI_DEFAULT_CURR_ITEM_GLYPH;
		CHAR SelectionGlyph			= MENUI_DEFAULT_SELECTION_GLYPH;
		CHAR MultiSelectionGlyph	= MENUI_DEFAULT_MULTI_SELECTION_GLYPH;
		CHAR ValueSeparatorGlyph	= MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH;
	};

#pragma endregion


#pragma region GLOBAL VARIABLE & FUNCTION DECLARATIONS

	namespace MUI
	{
		EXTERN UIOPTIONS Options;

		EXTERN RUIRENDEREROPTIONS DefaultRendererOptions();
		EXTERN RUIRENDEREROPTIONS DefaultLcdRendererOptions();
	}

#pragma endregion
};

#endif
